services:
  web:
    container_name: web
    hostname: web
    restart: on-failure
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
        postgres_database:
          condition: service_started
    networks:
      - internal_proxy
    env_file:
      - .env

  postgres_database:
    image: 'docker.io/postgres:${POSTGRES_TAG_VERSION:-latest}'
    container_name: postgres_db
    hostname: postgres_db
    restart: always
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-root}"
    networks:
      - internal_proxy
    volumes:
      - pg-data:/var/lib/postgresql/data/
    env_file:
      - .env

  setup_migration:
    container_name: setup_migration
    hostname: setup_migration
    restart: on-failure
    build:
      context: .
      dockerfile: Dockerfile
    command:
      - run script here
    volumes:
      - .:/app
    depends_on:
        postgres_database:
          condition: service_started
    networks:
      - internal_proxy
    env_file:
      - .env

  postgres_pgadmin:
    image: 'docker.io/dpage/pgadmin4:${PGADMIN_TAG_VERSION:-latest}'
    container_name: postgres_pgadmin
    hostname: postgres_pgadmin
    restart: always
    ports:
      - "8001:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_DEFAULT_EMAIL:-default@example.com}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_DEFAULT_PASSWORD:-password}"
    networks:
      - internal_proxy
    volumes:
      - pgadmin-data:/var/lib/pgadmin/
    env_file:
      - .env

volumes:
  pg-data:
  pgadmin-data:

networks:
  internal_proxy: